import{ao as T,a as k,O as x,v as z,J as D,T as s,a0 as V,Y as X,n as S,c3 as _,_ as r,cX as w,dN as J,Q as L}from"./index.444718ea.js";var A=function(){return null};A.isSelectOption=!0;A.displayName="AAutoCompleteOption";var d=A,b=function(){return null};b.isSelectOptGroup=!0;b.displayName="AAutoCompleteOptGroup";var y=b;function Q(o){var t,l;return(o==null||(t=o.type)===null||t===void 0?void 0:t.isSelectOption)||(o==null||(l=o.type)===null||l===void 0?void 0:l.isSelectOptGroup)}var U=function(){return r(r({},_(J(),["loading","mode","optionLabelProp","labelInValue"])),{},{dataSource:Array,dropdownMenuStyle:{type:Object,default:void 0},dropdownMatchSelectWidth:{type:[Number,Boolean],default:!0},prefixCls:String,showSearch:{type:Boolean,default:void 0},transitionName:String,choiceTransitionName:{type:String,default:"zoom"},autofocus:{type:Boolean,default:void 0},backfill:{type:Boolean,default:void 0},filterOption:{type:[Boolean,Function],default:!1},defaultActiveFirstOption:{type:Boolean,default:!0}})},g=k({compatConfig:{MODE:3},name:"AAutoComplete",inheritAttrs:!1,props:U(),slots:["option"],setup:function(t,l){var n=l.slots,N=l.attrs,B=l.expose;x(!("dataSource"in n),"AutoComplete","`dataSource` slot is deprecated, please use props `options` instead."),x(!("options"in n),"AutoComplete","`options` slot is deprecated, please use props `options` instead.");var f=z(),F=function(){var e,i=L((e=n.default)===null||e===void 0?void 0:e.call(n)),c=i.length?i[0]:void 0;return c},G=function(){var e;(e=f.value)===null||e===void 0||e.focus()},j=function(){var e;(e=f.value)===null||e===void 0||e.blur()};B({focus:G,blur:j});var I=D("select",t),p=I.prefixCls;return function(){var u,e,i=t.size,c=t.dataSource,h=t.notFoundContent,P=h===void 0?(u=n.notFoundContent)===null||u===void 0?void 0:u.call(n):h,v,E=N.class,$=(e={},s(e,E,!!E),s(e,"".concat(p.value,"-lg"),i==="large"),s(e,"".concat(p.value,"-sm"),i==="small"),s(e,"".concat(p.value,"-show-search"),!0),s(e,"".concat(p.value,"-auto-complete"),!0),e);if(t.options===void 0){var m,O,C=((m=n.dataSource)===null||m===void 0?void 0:m.call(n))||((O=n.options)===null||O===void 0?void 0:O.call(n))||[];C.length&&Q(C[0])?v=C:v=c?c.map(function(a){if(V(a))return a;switch(X(a)){case"string":return S(d,{key:a,value:a},{default:function(){return[a]}});case"object":return S(d,{key:a.value,value:a.value},{default:function(){return[a.text]}});default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.")}}):[]}var M=_(r(r(r({},t),N),{},{mode:w.SECRET_COMBOBOX_MODE_DO_NOT_USE,getInputElement:F,notFoundContent:P,class:$,ref:f}),["dataSource","loading"]);return S(w,M,r({default:function(){return[v]}},_(n,["default","dataSource","options"])))}}}),Y=T(g,{Option:d,OptGroup:y,install:function(t){return t.component(g.name,g),t.component(d.displayName,d),t.component(y.displayName,y),t}});export{Y as A};
